basePath: /v1
definitions:
  entity.Banner:
    properties:
      created_at:
        type: string
      id:
        type: string
      image_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  entity.BannerList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.Banner'
        type: array
    type: object
  entity.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.CategoryList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.Category'
        type: array
    type: object
  entity.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  entity.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      platform:
        type: string
      username:
        type: string
    type: object
  entity.MultipleFileUploadResponse:
    properties:
      url:
        items:
          $ref: '#/definitions/entity.Url'
        type: array
    type: object
  entity.Notification:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      message:
        type: string
      owner_id:
        type: string
      ownerrole:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  entity.NotificationList:
    properties:
      count:
        type: integer
      notifications:
        items:
          $ref: '#/definitions/entity.Notification'
        type: array
    type: object
  entity.Product:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  entity.ProductList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.Product'
        type: array
    type: object
  entity.Promotion:
    properties:
      created_at:
        type: string
      description:
        type: string
      discount_percentage:
        type: integer
      expires_at:
        type: string
      id:
        type: string
      started_at:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  entity.PromotionGetList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.Promotion'
        type: array
    type: object
  entity.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entity.Report:
    properties:
      created_at:
        type: string
      id:
        type: string
      reason:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entity.ReportList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.Report'
        type: array
    type: object
  entity.Session:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      is_active:
        type: boolean
      last_active_at:
        type: string
      platform:
        type: string
      updated_at:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  entity.SessionList:
    properties:
      count:
        type: integer
      sessions:
        items:
          $ref: '#/definitions/entity.Session'
        type: array
    type: object
  entity.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  entity.Url:
    properties:
      id:
        type: string
      url:
        type: string
    type: object
  entity.User:
    properties:
      access_token:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      password:
        type: string
      profile_picture:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
      user_role:
        type: string
      user_type:
        type: string
    type: object
  entity.UserList:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.VerifyEmail:
    properties:
      email:
        type: string
      otp:
        type: string
      platform:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server Food Delivery server.
  title: Food Delivery API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Register
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.VerifyEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Register
      tags:
      - auth
  /banner:
    post:
      consumes:
      - multipart/form-data
      description: Upload a banner
      operationId: create_banner_pic_file
      parameters:
      - collectionFormat: csv
        description: File to upload
        in: formData
        items:
          type: file
        name: file
        required: true
        type: array
      - description: Banner object
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/entity.Banner'
      produces:
      - application/json
      responses:
        "200":
          description: Success Request
          schema:
            $ref: '#/definitions/entity.MultipleFileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a banner
      tags:
      - banner
    put:
      consumes:
      - application/json
      description: Update a banner
      parameters:
      - description: Banner object
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/entity.Banner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Banner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a banner
      tags:
      - banner
  /banner/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a banner
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a banner
      tags:
      - banner
    get:
      consumes:
      - application/json
      description: Get a banner by ID
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Banner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a banner by ID
      tags:
      - banner
  /banner/list:
    get:
      consumes:
      - application/json
      description: Get a list of banners
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.BannerList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of banners
      tags:
      - banner
  /category:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Update a category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a category by ID
      tags:
      - category
  /category/list:
    get:
      consumes:
      - application/json
      description: Get a list of categorys
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CategoryList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of categorys
      tags:
      - category
  /firebase:
    post:
      consumes:
      - multipart/form-data
      description: Upload Multiple Files
      operationId: upload_multiple_files
      parameters:
      - collectionFormat: csv
        description: File to upload
        in: formData
        items:
          type: file
        name: file
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Success Request
          schema:
            $ref: '#/definitions/entity.MultipleFileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload Multiple Files
      tags:
      - Upload File
  /firebase/{id}:
    delete:
      consumes:
      - application/json
      description: Delete File
      operationId: delete_file
      parameters:
      - description: ID of the file to delete
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Success Request
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete File
      tags:
      - Upload File
  /notification:
    post:
      consumes:
      - application/json
      description: Create a notification and send an email to user
      parameters:
      - description: Notification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.Notification'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new notification
      tags:
      - notification
    put:
      consumes:
      - application/json
      description: Update a notification
      parameters:
      - description: Notification object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/entity.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a notification
      tags:
      - notification
  /notification/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a notification
      tags:
      - notification
    get:
      consumes:
      - application/json
      description: Get a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a notification by ID
      tags:
      - notification
  /notification/list:
    get:
      consumes:
      - application/json
      description: Get a list of notifications
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: user_id
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.NotificationList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of notifications
      tags:
      - notification
  /notification/status:
    put:
      consumes:
      - application/json
      description: Update a notification's status
      parameters:
      - description: Notification object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/entity.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a notification status
      tags:
      - notification
  /notification/update-status:
    put:
      consumes:
      - application/json
      description: Update status notification by ID
      parameters:
      - description: Notification object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/entity.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update status a notification by ID
      tags:
      - notification
  /product:
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product object
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product object
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - product
  /product/list:
    get:
      consumes:
      - application/json
      description: Get a list of products
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ProductList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of products
      tags:
      - product
  /product/upload/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Upload Multiple Files
      operationId: upload_product_pic_file
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        description: File to upload
        in: formData
        items:
          type: file
        name: file
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Success Request
          schema:
            $ref: '#/definitions/entity.MultipleFileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload Multiple Files
      tags:
      - product
  /promotion:
    post:
      consumes:
      - application/json
      description: Create a new promotion
      parameters:
      - description: Promotion object
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/entity.Promotion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Promotion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new promotion
      tags:
      - promotion
  /promotion/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a promotion
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a promotion
      tags:
      - promotion
    get:
      consumes:
      - application/json
      description: Get a promotion by ID
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Promotion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a promotion by ID
      tags:
      - promotion
  /promotion/list:
    get:
      consumes:
      - application/json
      description: Get a list of promotions
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PromotionGetList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of promotions
      tags:
      - promotion
  /report:
    post:
      consumes:
      - application/json
      description: Create a new report
      parameters:
      - description: Report object
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/entity.Report'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new report
      tags:
      - report
    put:
      consumes:
      - application/json
      description: Update a report
      parameters:
      - description: Report object
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/entity.Report'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a report
      tags:
      - report
  /report/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a report
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a report
      tags:
      - report
    get:
      consumes:
      - application/json
      description: Get a report by ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a report by ID
      tags:
      - report
  /report/list:
    get:
      consumes:
      - application/json
      description: Get a list of reports
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ReportList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of reports
      tags:
      - report
  /session:
    put:
      consumes:
      - application/json
      description: Update a session
      parameters:
      - description: Session object
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/entity.Session'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Session'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a session
      tags:
      - session
  /session/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a session
      tags:
      - session
    get:
      consumes:
      - application/json
      description: Get a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Session'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a session by ID
      tags:
      - session
  /session/list:
    get:
      consumes:
      - application/json
      description: Get a list of users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: user_id
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SessionList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of users
      tags:
      - session
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - user
  /user/list:
    get:
      consumes:
      - application/json
      description: Get a list of users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of users
      tags:
      - user
  /user/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload Multiple Files
      operationId: upload_profile_pic_file
      parameters:
      - collectionFormat: csv
        description: File to upload
        in: formData
        items:
          type: file
        name: file
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Success Request
          schema:
            $ref: '#/definitions/entity.MultipleFileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload Multiple Files
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
